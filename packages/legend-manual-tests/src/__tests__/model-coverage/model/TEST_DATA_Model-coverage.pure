###Relational
Database meta::analytics::mapping::modelCoverage::test::sampleDB
(
  Table FirmTable
  (
    id INTEGER PRIMARY KEY,
    legalName VARCHAR(200)
  )
  Table PersonTable
  (
    id INTEGER PRIMARY KEY,
    firmID INTEGER,
    firstName VARCHAR(200),
    lastName VARCHAR(200)
  )
  Table AddressTable
  (
    id INTEGER PRIMARY KEY,
    firmID INTEGER,
    name VARCHAR(200)
  )

  Join firm_person(PersonTable.firmID = FirmTable.id)
  Join firm_address(AddressTable.firmID = FirmTable.id)
)


###Pure
Enum meta::analytics::mapping::modelCoverage::test::IncType
{
  Corp,
  LLC
}

Class meta::analytics::mapping::modelCoverage::test::LegalEntity
{
  legalName: String[1];
  address: meta::analytics::mapping::modelCoverage::test::Address[1];
}

Class meta::analytics::mapping::modelCoverage::test::Firm extends meta::analytics::mapping::modelCoverage::test::LegalEntity
{
  id: Decimal[1];
  employees: meta::analytics::mapping::modelCoverage::test::Person[1..*];
  incType: meta::analytics::mapping::modelCoverage::test::IncType[1];
  employeeSize() {$this.employees->count()}: Number[1];
}

Class meta::analytics::mapping::modelCoverage::test::Person
{
  firstName: String[1];
  lastName: String[1];
}

Class meta::analytics::mapping::modelCoverage::test::Address
{
  zipcode: Integer[1];
}

Class meta::analytics::mapping::modelCoverage::test::Street extends meta::analytics::mapping::modelCoverage::test::Address
{
  streetName: String[1];
}

###Mapping
Mapping meta::analytics::mapping::modelCoverage::test::sampleRelationalMapping
(
  *meta::analytics::mapping::modelCoverage::test::Firm: Relational
  {
    ~primaryKey
    (
      [meta::analytics::mapping::modelCoverage::test::sampleDB]FirmTable.id
    )
    ~mainTable [meta::analytics::mapping::modelCoverage::test::sampleDB]FirmTable
    id: [meta::analytics::mapping::modelCoverage::test::sampleDB]FirmTable.id,
    employees
    (
      firstName: [meta::analytics::mapping::modelCoverage::test::sampleDB]PersonTable.firstName
    ),
    address: [meta::analytics::mapping::modelCoverage::test::sampleDB]@firm_address
  }
  *meta::analytics::mapping::modelCoverage::test::Person: Relational
  {
    ~primaryKey
    (
      [meta::analytics::mapping::modelCoverage::test::sampleDB]PersonTable.id
    )
    ~mainTable [meta::analytics::mapping::modelCoverage::test::sampleDB]PersonTable
    firstName: [meta::analytics::mapping::modelCoverage::test::sampleDB]PersonTable.firstName,
    lastName: [meta::analytics::mapping::modelCoverage::test::sampleDB]PersonTable.lastName
  }
  *meta::analytics::mapping::modelCoverage::test::LegalEntity: Operation
  {
    meta::pure::router::operations::inheritance_OperationSetImplementation_1__SetImplementation_MANY_()
  }
  *meta::analytics::mapping::modelCoverage::test::Address: Operation
  {
    meta::pure::router::operations::inheritance_OperationSetImplementation_1__SetImplementation_MANY_()
  }
  *meta::analytics::mapping::modelCoverage::test::Street: Operation
  {
    meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_(s1,s2)
  }
  meta::analytics::mapping::modelCoverage::test::Street[s2]: Relational
  {
    ~primaryKey
    (
      [meta::analytics::mapping::modelCoverage::test::sampleDB]AddressTable.id
    )
    ~mainTable [meta::analytics::mapping::modelCoverage::test::sampleDB]AddressTable
    zipcode: [meta::analytics::mapping::modelCoverage::test::sampleDB]AddressTable.id
  }
  meta::analytics::mapping::modelCoverage::test::Street[s1]: Relational
  {
    ~primaryKey
    (
      [meta::analytics::mapping::modelCoverage::test::sampleDB]AddressTable.id
    )
    ~mainTable [meta::analytics::mapping::modelCoverage::test::sampleDB]AddressTable
    zipcode: [meta::analytics::mapping::modelCoverage::test::sampleDB]AddressTable.id
  }
)